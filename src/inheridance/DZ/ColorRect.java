package inheridance.DZ;

public class ColorRect extends Rect {

    //1. Конструктор
    //конструктор дочернего класса должен иметь хотябы один конструктор как у роддительского класса, тк при создании объекта
    //дочернего класса мы заходим в конструктор дочернего класса, а из него идем в конструктор родительского класса.
    //Тоесть у дочернего класса должна быть возможность для создания объекта, а чтобы его создать нужно из текущего
    //дочернего констркутора успешно вызвать хотябы один родительский констркутор.
    //и заметка: конструтор по умолчанию если создать тут, то будет ошибка тк в родительском классе его попросту нет и как
    //описано выше мы не имеет ни одного конструктора который бы матчился родительский=дочерный.
    public ColorRect(double size) {
        super(size);
    }


    //2. Метод
    //а)
    // @Override
    // public double area(){
    //В данном классе мы его не переопределили и ошибки нет, тк он переопределен в родительском классе, и если мы
    //его тут вызовем то будет вызываться реализация метода из родительского класса Rect.


    //б)
    //Из дочерних классов, мы можем переопределять любые методы родительского класса объявленные как public. Тоесть
    //мы можем переопределить метод getA() из родительского класса Figure
    @Override
    public double getA() {
        return 10;
    }


    //3. final
    //а) в объявлении метода - нельзя переопределять в дочерних классах
    //если мы не хотим чтобы кто то переопределял наш метод, то мы можем просто указать ключевое слово final.
    /*@Override
    public double getB() {      //теперь тут ошибка тк в классе Figure сделали данный метод final
        return 10;
    }*/

    //б) в объявлении класса - нельзя наследоваться

    //в) в объявлении переменной - нельзя изменять значение


}
